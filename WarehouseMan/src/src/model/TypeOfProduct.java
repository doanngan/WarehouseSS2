package src.model;

import java.util.ArrayList;
import java.util.Collection;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.Select;
import domainapp.basics.util.Tuple;


public class TypeOfProduct {
	
	private static int idCounter = 0; 

	@DAttr(name = "id", id = true, auto = true, type = Type.String, length = 6, mutable = false, optional = false)
	private String id;

	@DAttr(name = "type", type = Type.String, length = 30, optional = false)
	private String type;
	
	@DAttr(name = "products", type = Type.Collection, optional = false, serialisable = false, filter = @Select(clazz = Product.class))
	@DAssoc(ascName = "product-type", role = "type", ascType = AssocType.One2Many, endType = AssocEndType.One,
	associate = @Associate(type = Product.class, cardMin = 0, cardMax = 30))
	private Collection<Product> products;

	private int count;
	@DOpt(type = DOpt.Type.DataSourceConstructor)
	public TypeOfProduct(@AttrRef("id") String id, @AttrRef("type") String type) {
		this.id = nextID(id);
		this.type = type; 
		products = new ArrayList<>();
		count = 0;
		
	}
	@DOpt(type = DOpt.Type.ObjectFormConstructor)
	@DOpt(type = DOpt.Type.RequiredConstructor)
	public TypeOfProduct(@AttrRef("type") String type) {
		this(null, type);
	}

	public String getId() {
		return id;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@DOpt(type = DOpt.Type.LinkAdder)
	public boolean addProduct(Product d) {
		if (!products.contains(d))
			products.add(d);

		return false;
	}

	@DOpt(type = DOpt.Type.LinkAdderNew)
	public boolean addNewProduct(Product d) {
		products.add(d);

		count++;

		return false;
	}

	@DOpt(type = DOpt.Type.LinkAdder)
	public boolean addProduct(Collection<Product> deos) {
		boolean added = false;
		for (Product d : deos) {
			if (!products.contains(d)) {
				if (!added)
					added = true;
				products.add(d);
			}
		}
		return false;
	}

	@DOpt(type = DOpt.Type.LinkAdderNew)
	public boolean addNewProduct(Collection<Product> deos) {
		products.addAll(deos);
		count += deos.size();

		return false;
	}

	@DOpt(type = DOpt.Type.LinkRemover)
	public boolean removeProduct(Product d) {
		boolean removed = products.remove(d);

		if (removed) {
			count--;

		}
		return false;
	}

	public void setProducts(Collection<Product> deo) {
		this.products = deo;
		count = deo.size();

	}

	public Collection<Product> getProducts() {
		return products;
	}
	@DOpt(type = DOpt.Type.LinkCountGetter)
	public int getCount() {
		return count;
		// return enrolments.size();
	}

	@DOpt(type = DOpt.Type.LinkCountSetter)
	public void setCount(int count1) {
		count = count1;
	}


	@Override
	public String toString() {
		return "type (" + id + "," + type+ " )";
	}

	// automatically generate the next student id
	 private String nextID(String id) throws ConstraintViolationException {
		    if (id == null) { // generate a new id
		        idCounter++;
		      return "T" + idCounter;
		    } else {
		      // update id
		      int num;
		      try {
		        num = Integer.parseInt(id.substring(1));
		      } catch (RuntimeException e) {
		        throw new ConstraintViolationException(
		            ConstraintViolationException.Code.INVALID_VALUE, e, new Object[] { id });
		      }
		      
		      if (num > idCounter) {
		        idCounter = num;
		      }
		      
		      return id;
		    }
		  }

		  /**
		   * @requires 
		   *  minVal != null /\ maxVal != null
		   * @effects 
		   *  update the auto-generated value of attribute <tt>attrib</tt>, specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
		   */
		  @DOpt(type=DOpt.Type.AutoAttributeValueSynchroniser)
		  public static void updateAutoGeneratedValue(
		      DAttr attrib,
		      Tuple derivingValue, 
		      Object minVal, 
		      Object maxVal) throws ConstraintViolationException {
		    
		    if (minVal != null && maxVal != null) {
		      //TODO: update this for the correct attribute if there are more than one auto attributes of this class 

		      String maxId = (String) maxVal;
		      
		      try {
		        int maxIdNum = Integer.parseInt(maxId.substring(1));
		        
		        if (maxIdNum > idCounter) // extra check
		          idCounter = maxIdNum;
		        
		      } catch (RuntimeException e) {
		        throw new ConstraintViolationException(
		            ConstraintViolationException.Code.INVALID_VALUE, e, new Object[] {maxId});
		      }
		    }
		  }
}
 